package sample.demo2;import Model.Admin;import Model.Patient;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.TextField;import javafx.stage.Stage;import java.io.IOException;import java.net.URL;import java.util.Objects;import java.util.ResourceBundle;public class AdminEditSinglePatientController implements Initializable {	@FXML	private TextField addressField, ageField, cityField, cnicField, emailField, idField, fnameField, lnameField, phoneField;		private static String patientId;	private Stage stage;	private Scene scene;	private Parent root;	DatabaseConnection database = DatabaseConnection.getInstance ();	public static void setPatientId ( String patientId ) {		AdminEditSinglePatientController.patientId = patientId;	}		@Override	public void initialize ( URL url, ResourceBundle resourceBundle ) {		try {						Patient patient = database.getPatientById ( patientId );			String[] name = patient.getName ().split ( " " );						idField.setText ( patient.getId () );			fnameField.setText ( name[0] );			lnameField.setText (name[1]);			phoneField.setText ( patient.getPhone () );			emailField.setText ( patient.getEmail () );			cnicField.setText ( patient.getCnic () );			cityField.setText ( patient.getCity () );			ageField.setText ( patient.getAge () );			addressField.setText ( patient.getHouse () );					} catch (Exception e) {			e.printStackTrace ();		}			}		public void toAllPatient ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("adminAllPatients.fxml")));		stage = (Stage) ((Node)event.getSource()).getScene().getWindow();		scene = new Scene (root);		stage.setScene(scene);		stage.show();	}		public void toAllAdmin ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("adminAllAdmin.fxml")));		stage = (Stage) ((Node)event.getSource()).getScene().getWindow();		scene = new Scene (root);		stage.setScene(scene);		stage.show();	}		public void toAdminHome ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("adminHome.fxml")));		stage = (Stage) ((Node)event.getSource()).getScene().getWindow();		scene = new Scene (root);		stage.setScene(scene);		stage.show();	}	public void toAllDoctor ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("adminAllDoctor.fxml")));		stage = (Stage) ((Node)event.getSource()).getScene().getWindow();		scene = new Scene (root);		stage.setScene(scene);		stage.show();	}		public void logout ( ActionEvent event) throws IOException {		root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("landing.fxml")));		stage = (Stage) ((Node)event.getSource()).getScene().getWindow();		scene = new Scene(root);		stage.setScene(scene);		stage.show();	}			public boolean validity () {		boolean validity = true;				if ( !AlphabetValidator.isValid ( cityField )) {			cityField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( !AlphabetValidator.isValid ( fnameField )) {			fnameField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( !AlphabetValidator.isValid ( lnameField )) {			lnameField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( !NumberValidator.isValid ( phoneField )) {			phoneField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( addressField.getText().isBlank()) {			addressField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( !EmailValidator.isValid( emailField )) {			emailField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}		if ( !CNICValidator.isValid ( cnicField )) {			cnicField.setStyle("-fx-background-color: #ebbebebe;");			validity = false;		}				ObservableList <Patient> doctorList = database.getAllPatient ();		for ( Patient patient :				doctorList ) {			if (idField.getText ().equals ( patient.getId () ))				continue;			if (emailField.getText ().equals ( patient.getEmail () )){				emailField.setStyle ( "-fx-background-color: #ebbebebe;" );				validity = false;			}			if (cnicField.getText ().equals ( patient.getCnic () )){				cnicField.setStyle ( "-fx-background-color: #ebbebebe;" );				validity = false;			}					}				if (!validity)			return false;		return true;	}	public void clearStyle() {		idField.setStyle ( null );		fnameField.setStyle ( null );		lnameField.setStyle ( null );		cnicField.setStyle ( null );		phoneField.setStyle ( null );		emailField.setStyle ( null );		cityField.setStyle ( null );		addressField.setStyle ( null );	}		public void updatePatient(ActionEvent event) {		try {			clearStyle ();			cnicField.setStyle ( "-fx-text-fill: red;" );			if (!validity ())				return;			database.updatePatientById ( idField.getText (), fnameField.getText (), lnameField.getText (), cnicField.getText (), phoneField.getText (), emailField.getText (), addressField.getText (), cityField.getText () );			toAllPatient ( event );		} catch (Exception e) {			e.printStackTrace ();		}	}}