package sample.demo2;import Model.DoctorAppointment;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.control.Label;import javafx.scene.layout.HBox;import javafx.scene.layout.VBox;import java.io.IOException;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.ResourceBundle;public class DoctorHomeController implements Initializable {	@FXML	private VBox appointmentTable;	@FXML	private Label cnic, department, email, id, name, phone;		DatabaseConnection database = new DatabaseConnection();	private String doctorId = database.getDocIdWithEmail ( "roha@gmail.com" );	private ObservableList <String> patientIds = database.getAppointPatIdsWithDocID (doctorId);	private ObservableList<String> patientNames = patIdsToName(patientIds);	private ObservableList<String> dates = database.getAppointDateWithDocID (doctorId);	private ObservableList<String> times = database.getAppointTimeWithDocID(doctorId);	private ObservableList<String> prescriptions = database.getAppointPrescWithDocID (doctorId);		@Override	public void initialize ( URL url, ResourceBundle resourceBundle ) {				String docName = database.getDocNameWithDocId ( doctorId );		String deparmentId = database.getDocDptIdWithDocId ( doctorId );		String dptName = database.getDptNamWithDptId ( deparmentId );		String docCnic = database.getDocCnicWithDocId ( doctorId );		String docPhone = database.getDocPhoneWithDocId ( doctorId );				name.setText ( docName );		department.setText ( dptName );		cnic.setText ( docCnic );		phone.setText ( docPhone );		id.setText ( doctorId );		email.setText ( "roha@gmail.com" );						List<DoctorAppointment> appointmentList = new ArrayList <> (appointments ());				for ( DoctorAppointment appointment : appointmentList ) {			FXMLLoader fxmlLoader = new FXMLLoader ();			fxmlLoader.setLocation ( getClass ().getResource ( "doctorAppointmentItem.fxml" ) );						try {				HBox hBox = fxmlLoader.load ();				DoctorAppointmentItemController appointmentItem = fxmlLoader.getController ();				appointmentItem.loadAppointment ( appointment );				appointmentTable.getChildren ().add ( hBox );			} catch ( IOException e ) {				System.out.println ( e.getMessage () );			}		}			}		private ObservableList<String> patIdsToName (ObservableList<String> patientIds) {		ObservableList<String> patNames = FXCollections.observableArrayList();				for(String id: patientIds) {			patNames.add(database.getPatNamWithPatId (id));		}				return patNames;	}			private List<DoctorAppointment> appointments() {		int count = 0, index = 0;				List<DoctorAppointment> appointmentList = new ArrayList <> ();				for(String time: times) {			DoctorAppointment appointment = new DoctorAppointment ();			appointment.setSrNo ( ++count );			appointment.setName ( patientNames.get ( index ) );			appointment.setDate ( dates.get ( index ) );			appointment.setTime ( time );			appointment.setPrescription ( prescriptions.get ( index ) );			appointmentList.add ( appointment );			index++;			if (index == 5)				break;		}				return appointmentList;	}		}