package sample.demo2;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.*;import javafx.stage.Stage;import java.io.IOException;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import java.util.Objects;public class RegistrationController {    // Loading FXML fx:ids    @FXML    private TextField cityRegister, cnicRegister, emailRegister, fnameRegister, houseNoRegister, lnameRegister, phoneNumberRegister;    @FXML    private PasswordField confirmPasswordRegister, passwordRegister;    @FXML    private Label invalidLabelRegister;    @FXML    private DatePicker dobRegister;    @FXML    private Button registerButtonFormRegister;    //Global Variables    boolean validPassword = true;    boolean validity = true;    private Stage stage;    private Scene scene;    private Parent root;    //An event Handler to shift the scene to Landing Page    public void toLandingPage ( ActionEvent event) throws IOException {        root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("landing.fxml")));        stage = (Stage) ((Node)event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    //A function to go to Landing page After Registration    public void toLandingPage () throws IOException {        FXMLLoader loader = new FXMLLoader(getClass().getResource("landing.fxml"));        root = loader.load();        scene = new Scene(root);        stage = (Stage) registerButtonFormRegister.getScene().getWindow();        stage.setScene(scene);    }    //An Event Handler to shift a scene to Login Form    public void toLoginForm ( ActionEvent event) throws IOException {        root = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("login.fxml")));        stage = (Stage) ((Node)event.getSource()).getScene().getWindow();        scene = new Scene(root);        stage.setScene(scene);        stage.show();    }    // A function to remove the border of each field on Register Form    public void removeFieldBorder () {        cityRegister.setStyle("-fx-border-style: none;");        fnameRegister.setStyle("-fx-border-style: none;");        lnameRegister.setStyle("-fx-border-style: none;");        phoneNumberRegister.setStyle("-fx-border-style: none;");        emailRegister.setStyle("-fx-border-style: none;");        passwordRegister.setStyle("-fx-border-style: none;");        confirmPasswordRegister.setStyle("-fx-border-style: none;");        houseNoRegister.setStyle("-fx-border-style: none;");        dobRegister.setStyle("-fx-border-color: none;");        cnicRegister.setStyle("-fx-border-style: none;");    }    // A function validates the data in each field and border turn to red on wrong input    public void checkFieldsValidity () {        validity = true;        validPassword = true;        LocalDate currentDate = LocalDate.now ();        if ( !AlphabetValidator.isValid ( cityRegister )) {            cityRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( !PasswordValidator.isValid( passwordRegister )) {            passwordRegister.setStyle("-fx-border-color: red;");            validPassword = false;        }        if ( confirmPasswordRegister.getText ().isBlank () || !confirmPasswordRegister.getText().equals( passwordRegister.getText())) {            confirmPasswordRegister.setStyle("-fx-border-color: red;");            validPassword = false;        }        if ( !AlphabetValidator.isValid ( fnameRegister )) {            fnameRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( !AlphabetValidator.isValid ( lnameRegister )) {            lnameRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( !NumberValidator.isValid ( phoneNumberRegister )) {            phoneNumberRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( houseNoRegister.getText().isBlank()) {            houseNoRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( !EmailValidator.isValid( emailRegister )) {            emailRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( !CNICValidator.isValid ( cnicRegister )) {            cnicRegister.setStyle("-fx-border-color: red;");            validity = false;        }        if ( dobRegister.getValue () == null || dobRegister.getValue ().isAfter ( currentDate )) {            dobRegister.setStyle("-fx-border-color: red;");            validity = false;        }    }    //A function is called when the Register Button is Pressed    public void registerAction () {        removeFieldBorder ();        checkFieldsValidity ();        if ( validity ) {            fillData();        }        else if ( !validPassword ) {            invalidLabelRegister.setText(" Password Should 8 Characters Long with at least one Alphabet, Number and Special Character!");        }        else {            invalidLabelRegister.setText("Please Write Carefully And Fill out All the Fields!");        }    }        //This function creates a connection with a database for Registration Class and executes the queries to register data    public void fillData() {        try {            DatabaseConnection connectNow = new DatabaseConnection ();            Connection connectDB = connectNow.getConnection ();                        LocalDate date = dobRegister.getValue ();            String DOB = date.format ( DateTimeFormatter.ofPattern ( "yyyy-MM-dd" ) );                        PreparedStatement statement = connectDB.prepareStatement ( DatabaseConnection.checkRegistration );            statement.setString ( 1, emailRegister.getText () );            statement.setString ( 2, cnicRegister.getText () );                        ResultSet checkQueryResult = statement.executeQuery ();                        if ( checkQueryResult.next () ) {                invalidLabelRegister.setText ( "Patient Already Registered!" );                cnicRegister.setStyle ( "-fx-border-color: red;" );                emailRegister.setStyle ( "-fx-border-color: red;" );                            } else {                statement = connectDB.prepareStatement ( DatabaseConnection.registerQuery );                statement.setString ( 1, fnameRegister.getText () );                statement.setString ( 2, lnameRegister.getText () );                statement.setString ( 3, phoneNumberRegister.getText () );                statement.setString ( 4, emailRegister.getText () );                statement.setString ( 5, passwordRegister.getText () );                statement.setString ( 6, houseNoRegister.getText () );                statement.setString ( 7, cityRegister.getText () );                statement.setString ( 8, DOB );                statement.setString ( 9, cnicRegister.getText () );                statement.executeUpdate ();                toLandingPage ();            }                        connectDB.close ();                    } catch ( IOException | SQLException e ) {            e.printStackTrace ();            e.getCause ();        }    }}