package sample.demo2;import Model.Department;import Model.Doctor;import javafx.collections.FXCollections;import javafx.collections.ObservableList;import javafx.event.ActionEvent;import javafx.fxml.FXML;import javafx.fxml.FXMLLoader;import javafx.fxml.Initializable;import javafx.scene.Node;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.ComboBox;import javafx.scene.control.DatePicker;import javafx.scene.control.Label;import javafx.stage.Stage;import java.io.IOException;import java.net.URL;import java.sql.Connection;import java.sql.PreparedStatement;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import java.util.Objects;import java.util.ResourceBundle;public class PatientMakeAppointmentController implements Initializable {		private Parent root;	private Stage stage;	private Scene scene;	@FXML	private ComboBox<String> departmentField, doctorField, timeField;	@FXML	private DatePicker dateField;	@FXML	private Label invalidLabel;	DatabaseConnection database = DatabaseConnection.getInstance ();	@Override	public void initialize ( URL url, ResourceBundle resourceBundle ) {		try {			ObservableList<Department> departmentList = database.getAllDepartment ();			ObservableList<String> departmentOptions = FXCollections.observableArrayList ();			ObservableList<String> timeOptions = FXCollections.observableArrayList ();						for ( Department department: departmentList ) {				departmentOptions.add ( department.getId () + " - " + department.getName () );			}			departmentField.setItems ( departmentOptions );						timeOptions.add("08:00:00");			timeOptions.add("09:00:00");			timeOptions.add("10:00:00");			timeOptions.add("11:00:00");			timeOptions.add("12:00:00");			timeOptions.add("13:00:00");			timeOptions.add("14:00:00");			timeOptions.add("15:00:00");			timeOptions.add("16:00:00");						timeField.setItems ( timeOptions );										} catch ( Exception e ) {			System.out.println (e.getMessage ());		}	}		public boolean validity () {		boolean valid = true;		if (timeField.getValue () == null) {			timeField.setStyle ( "-fx-border-color: #eb1111b5;" );			invalidLabel.setText ( "Please Choose Time Correctly!" );			valid = false;		}		if (dateField.getValue () == null || dateField.getValue ().isBefore ( LocalDate.now () ) ) {			dateField.setStyle ( "-fx-border-color: #eb1111b5;" );			invalidLabel.setText ( "Please Choose Date Correctly!" );			valid = false;		}		if (doctorField.getValue () == null) {			doctorField.setStyle ( "-fx-border-color: #eb1111b5;" );			invalidLabel.setText ( "Please Choose Doctor Correctly!" );			valid = false;		}		if (departmentField.getValue () == null) {			departmentField.setStyle ( "-fx-border-color: #eb1111b5;" );			invalidLabel.setText ( "Please Choose Department Correctly!" );			valid = false;		}					return valid;	}		public void setDefaultBorder () {		departmentField.setStyle ( "-fx-border-color: #577CFF;" );		doctorField.setStyle ( "-fx-border-color: #577CFF;" );		dateField.setStyle ( "-fx-border-color: #577CFF;" );		timeField.setStyle ( "-fx-border-color: #577CFF;" );	}		public void makeAppointmentAction (ActionEvent event) {		try {			setDefaultBorder ();			if (!validity ()) {				return;			}			String[] department = departmentField.getValue ().split ( " - " );			String[] doctor = doctorField.getValue ().split ( " - " );			LocalDate rawDate = dateField.getValue ();			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");						String formattedDate = rawDate.format ( formatter );			String time = formattedDate+ " " + timeField.getValue ().toString ();						boolean existedAppointment = database.appointmentExist (department[0], doctor[0], time);						if (existedAppointment) {				invalidLabel.setText ( "Choose some other time or day. This slot is busy!" );			} else {				database.makeAppointment (PatientHomeController.getPatientId (), doctor[0], department[0], time );				toPatientHome ( event );			}					} catch (Exception e) {			System.out.println(e.getMessage());		}	}		public void setDoctor () {		try {			ObservableList<Doctor> doctorList = database.getDoctorByDepartment (departmentField.getValue ());			ObservableList<String> doctorOptions = FXCollections.observableArrayList ();			for ( Doctor doctor: doctorList ) {				doctorOptions.add ( doctor.getId () + " - " + doctor.getName () );			}			doctorField.setItems ( doctorOptions );					} catch ( Exception e ) {			System.out.println (e.getMessage());		}	}			public void logout ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("landing.fxml")));		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();		scene = new Scene(root);		stage.setScene(scene);		stage.show();	}		public void toPatientHome ( ActionEvent event) throws IOException {		root = FXMLLoader.load( Objects.requireNonNull(getClass().getResource("patientHome.fxml")));		stage = (Stage) ((Node) event.getSource()).getScene().getWindow();		scene = new Scene(root);		stage.setScene(scene);		stage.show();	}}